# Verbaac Connect Frontend Study Guide

This guide is designed for someone new to React and modern frontend development. It will help you understand the entire codebase, file by file, starting from the entry point and progressing through all major architectural layers. Follow the steps in order for a comprehensive understanding.

---

## 1. Project Overview & Setup
- **Goal:** Understand the project structure, tooling, and configuration.
- **Files to Review:**
  - `package.json`: Project dependencies and scripts.
  - `vite.config.ts`: Vite build tool configuration.
  - `tsconfig.json`, `tsconfig.app.json`, `tsconfig.node.json`: TypeScript settings.
  - `tailwind.config.ts`, `postcss.config.js`: Styling and CSS tooling.
  - `README.md`, `PROJECT_README.md`: Project documentation.

**Action:**
- Read each config file and note its purpose.
- Run the project locally using the provided scripts.

---

## 2. Entry Point & App Initialization
- **Goal:** Trace how the app starts and renders.
- **Files to Review:**
  - `src/main.tsx`: The true entry point. Renders `<App />` into the DOM.
  - `index.html`: The HTML shell for the SPA.

**Action:**
- Follow the import chain from `main.tsx` to `App.tsx`.

---

## 3. App Component & Routing
- **Goal:** Understand the main application structure and navigation.
- **Files to Review:**
  - `src/App.tsx`: Root React component. Sets up React Router and wraps the app in context providers.
  - All layout components: `src/layout/MainLayout.tsx`, `src/layout/AuthLayout.tsx`, `src/layout/DashboardLayout.tsx`.
  - Routing: How pages are mapped to URLs.

**Action:**
- Draw a diagram of the route structure.
- Note how layouts and pages are composed.

---

## 4. Context Providers & State Management
- **Goal:** Learn how global state (especially authentication) is managed.
- **Files to Review:**
  - `src/contexts/AuthContext.tsx`: Authentication context and reducer.
  - `src/hooks/useAuth.ts`: Custom hook for accessing auth state.
  - `src/components/ProtectedRoute.tsx`: Route protection logic.

**Action:**
- Trace how login, logout, and registration work.
- Map out the context provider tree.

---

## 5. API Layer & Data Fetching
- **Goal:** Understand how the frontend communicates with the backend.
- **Files to Review:**
  - `src/lib/api.ts`: Centralized API service using Axios. Contains all backend endpoint functions.
  - `src/types/index.ts`: TypeScript interfaces for API responses and models.

**Action:**
- For each API function, note the endpoint, parameters, and expected response.
- See how JWT tokens are managed and attached to requests.

---

## 6. Feature Modules (Pages)
- **Goal:** Explore each major feature and how it interacts with the API and context.
- **Files to Review:**
  - `src/modules/auth/pages/Login.tsx`, `Register.tsx`: Authentication forms and logic.
  - `src/modules/housing/pages/Housing.tsx`: Property listing and search.
  - `src/modules/marketplace/pages/Marketplace.tsx`: Marketplace features.
  - `src/modules/dashboard/pages/Dashboard.tsx`: User dashboard and stats.
  - Other modules: Roommates, Agreements, Notifications, Messages, etc.

**Action:**
- For each page, trace the data flow: from API call → context/state → UI rendering.
- Note how props and state are used in each component.

---

## 7. UI Components & Layout
- **Goal:** Learn how reusable UI components are built and styled.
- **Files to Review:**
  - `src/components/Navbar.tsx`: Navigation bar, dynamic based on authentication.
  - Other shared components: buttons, icons, forms.
  - `src/index.css`: Global styles and Tailwind CSS integration.

**Action:**
- Identify which components are reused across pages.
- See how Tailwind classes are applied for styling.

---

## 8. Error Handling & Loading States
- **Goal:** Understand how the app handles errors and loading.
- **Files to Review:**
  - Error boundaries (if any), error messages in context and pages.
  - Loading spinners and conditional rendering.

**Action:**
- Note how errors from API calls are surfaced to the user.
- See how loading states are managed in each page.

---

## 9. TypeScript Usage & Type Safety
- **Goal:** Appreciate how TypeScript enforces correctness.
- **Files to Review:**
  - `src/types/index.ts`: All interfaces and types.
  - Usage of types in API, context, and components.

**Action:**
- For each major function/component, check its type annotations.
- See how types help prevent bugs and clarify data structures.

---

## 10. Advanced Features & Extensibility
- **Goal:** Prepare to extend or modify the codebase.
- **Files to Review:**
  - API service for adding new endpoints.
  - Context for adding new global state.
  - Feature modules for adding new pages.

**Action:**
- Try adding a new API call in `api.ts` and use it in a page.
- Add a new page and route in `App.tsx`.

---

## 11. Review & Documentation
- **Goal:** Summarize your understanding and document the architecture.
- **Action:**
  - Write a summary of how data flows from API to UI.
  - Document the purpose of each major file and folder.
  - Create diagrams for context providers and routing.

---

## 12. Questions & Mentorship
- **Goal:** Get help when stuck and validate your understanding.
- **Action:**
  - Schedule regular check-ins with a mentor or team member.
  - Ask questions about any file or concept that’s unclear.

---

## Tips for Success
- Take notes as you go.
- Experiment by changing code and observing results.
- Use browser dev tools and React DevTools to inspect state and props.
- Don’t hesitate to break things—learning comes from fixing them!

---

**By following this guide, you’ll gain a deep, file-by-file understanding of the Verbaac Connect frontend architecture, even if you’re new to React.**
