

📘 Project Overview:
1. Project Overview
Verbaac Connect is a production-grade web platform (with a future mobile extension) aimed at helping Nigerian students:
Find off-campus accommodation
Connect with exiting tenants
Match with potential roommates
Buy/sell second-hand items
Create digital rental agreements with escrow
The web platform (MVP) will launch first, followed by a React Native mobile application. The system is designed for scalability, trust, and ease of use.

2. User Roles & Permissions
Student
Register using university email and ID
Search for housing
Post exit notices
Post or browse marketplace items
Rate and review listings
Use roommate matching
Landlord
Upload property listings
Submit KYC
Interact with tenants
Exiting Tenant
Notify about room availability
Connect with interested students
Buyer/Seller
Sell or request second-hand items
Use in-app messaging and escrow
Admin
Manage users, listings, disputes
Handle reports and payments
Access analytics dashboard

3. Core Functional Modules
🏠 Student Housing
Direct listings by landlords (photos, rules, pricing)
Exit posts by tenants (vacating date, contact)
Smart search (filters: price, amenities, location)
Map integration (Google Maps)
Booking & chat with landlords/tenants
Verified-only listings and student reviews
📄 Digital Agreements & Escrow
Generate digital tenancy agreements
Payments held securely (Monbify)
Escrow release only after inspection confirmation
👥 Roommate Matching
Preference-based matching algorithm
Direct messaging for coordination
📍 University-Specific Hubs
Localized listings, agents, and updates
🛍️ Second-Hand Marketplace
Item listings with photos, tags, condition
Wishlist and want-to-buy posts
In-app negotiation and optional escrow
AI-based matching (text + images)
🔔 Notifications
Email/SMS/Push for:
Booking confirmations
New listings
Match suggestions
Inspection reminders
Chat messages
📊 Admin & Analytics
User moderation, complaints, reports
Dashboard for sellers & admins
View counts, chats, conversions
💸 Referral & Rewards
Refer landlords/tenants and earn platform credits
📱 Offline Support (Nice-to-Have)
SMS/WhatsApp for inspection scheduling and updates

4. AI-Powered Features
Text Matching: NLP to suggest listings and items ("Used bed under ₦20k")
Image Matching: Visual similarity for posted items
Voice Search (optional): Azure Speech-to-Text integration
Dispute Resolution Assistant (future AI-powered)
Services:
ListingService
AuthService
MatchService (AI)
EscrowService
NotificationService

5. Security & Compliance
GDPR-like data storage
OTP login (optional)
HTTP-only cookies for auth tokens
Data encryption at rest (where needed)
Admin moderation tools

6. User Stories & Flows
Example: Booking Housing
Student registers
Logs in and filters listings
Selects property and books
Pays via escrow
Landlord confirms availability
Student inspects property
Funds released after confirmation
Example: Selling an Item
Seller uploads item (images, tags)
Item matched to wishlists (AI)
Buyer messages seller
Deal confirmed with/without escrow
Optional delivery/logistics integration
Example: Roommate Match
Student completes preference form
Algorithm matches best-fit students
Chat and connect


Main Project Stack
We are building only the frontend (hosted separately on Vercel), using:
React with TypeScript


Vite as the build tool


Tailwind CSS for styling


React Router v6


Optionally shadcn/ui or Radix UI for accessible component libraries


The backend is hosted independently and will be connected via APIs later.

Sure! Below is the full, expanded, and production-ready route + folder structure + feature overview for the Verbaac Connect frontend project. This is tailored for a scalable, modular React + TypeScript codebase with routing, UI layout, and feature modules clearly mapped.

🚀 VERBAAC CONNECT – FRONTEND ROUTING & FILE STRUCTURE OVERVIEW

🎯 Project Objective
Verbaac Connect is a multi-functional platform for Nigerian students offering:
Off-campus housing search and management


Roommate matching


Second-hand marketplace with escrow payment


Digital rental agreements with landlord/student collaboration


Secure chat messaging and notification system


Personal dashboards, wallet, referral rewards


Administrative moderation tools


This document outlines the complete file routing and folder architecture to scaffold the frontend for this production-grade app using:
React + TypeScript + Vite


Tailwind CSS


React Router v6


Modular folder organization under src/



🧱 Folder Structure
src/
├── assets/              # Logos, icons, static images
├── components/          # Global reusable components
├── layout/              # Layouts (MainLayout, AuthLayout, DashboardLayout)
├── hooks/               # Global React hooks
├── lib/                 # API clients, utils, SEO config
├── types/               # Shared TypeScript types and interfaces
├── modules/             # Feature-based structure (see below)
│   ├── auth/
│   ├── housing/
│   ├── marketplace/
│   ├── agreements/
│   ├── roommates/
│   ├── dashboard/
│   ├── notifications/
│   ├── messaging/
│   ├── admin/
│   ├── home/
│   ├── error-pages/
│
├── App.tsx              # Sets up layout routing and route tree
├── main.tsx             # ReactDOM root
└── index.css            # Tailwind and global CSS

Each module under modules/ has its own:
components/


pages/


Optional hooks/, lib/, or api.ts



🧭 ROUTE MAP
🔐 AUTHENTICATION & ONBOARDING
/login → Login page


/register → Register with student credentials


/verify-email → Email/OTP verification


/forgot-password → Forgot password


/reset-password/:token → Reset password form


/onboarding → First-time user setup (select university, interests)



🏠 STUDENT HOUSING MODULE
/housing → Housing search & filter


/housing/:id → View single property detail


/housing/post-exit → Students exiting room (vacating notice form)


/housing/list-property → For landlords/agents to add property


/housing/my-listings → Student or landlord listings management



🛒 MARKETPLACE MODULE (E-COMMERCE)
/marketplace → All items (filter by university, category, etc.)


/marketplace/:id → Item detail


/marketplace/cart → Cart page


/marketplace/order-summary → Payment confirmation (pre-escrow)


/marketplace/post → Post an item for sale


/marketplace/my-items → Seller’s dashboard


/marketplace/wishlist → Wishlist/favorites


/marketplace/delivery-status/:id → Escrow tracker and item confirmation


Marketplace Special Features:
Escrow integrated after checkout


Delivery coordination between buyer & seller


Buyer confirms delivery condition before fund is released


Option to use app-powered delivery or manual arrangement


Filters include university, price, category, distance, condition


Modern product card UI with wishlist, price tags, hover animations



📄 RENTAL AGREEMENTS MODULE
/agreements → View agreements


/agreements/create → Generate agreement flow


/agreements/:id → Detail view (terms, escrow status)


/agreements/review/:id → Review terms before signature


/agreements/sign/:id → Digitally sign document


/agreements/success → Final confirmation



🤝 ROOMMATE MATCHING MODULE
/roommates → Preferences form (budget, location, habits)


/roommates/result → Roommate match result


/roommates/profile/:id → View roommate profile


/roommates/invite/:id → Request to connect with a match



💬 MESSAGING & NOTIFICATIONS
/messages → Inbox: all threads


/messages/:threadId → Chat with a student/seller/landlord


/notifications → System and user alerts



🧑‍💼 USER DASHBOARD & ACCOUNT MANAGEMENT
/dashboard → Overview page


/dashboard/profile → Update name, photo, contact


/dashboard/kyc → Landlord KYC form


/dashboard/security → Change password, enable 2FA


/dashboard/activity → Audit logs: login, transactions


/dashboard/wallet → Escrow balance, top-up, withdrawals


/dashboard/rewards → Referral code, reward status



⚙️ ADMIN PANEL (FUTURE MODULE)
/admin → Admin overview


/admin/users → Manage students/landlords


/admin/listings → Moderate properties and marketplace


/admin/disputes → Resolve buyer/seller issues


/admin/payments → Escrow log, refunds


/admin/analytics → Platform stats, growth data



🌐 PUBLIC & LEGAL PAGES
/ → Home landing page


/about → What Verbaac is about


/faq → Common questions and help


/terms → Terms of use


/privacy → Privacy policy


/not-found → 404 fallback


/maintenance → Temporary site maintenance page



🎨 UI & DESIGN SYSTEM
Follow Airbnb-style design for housing module (clean, grid, map view)


Follow modern eCommerce UI for marketplace:


Product cards, wishlist buttons, filter sidebar


Pricing animations, tags, microinteractions


Use tailwind.config.ts + theme.json for theme centralization


Global support for light/dark/system theme


Responsive grid + spacing for mobile, tablet, and desktop


Animate components using Framer Motion or Tailwind transitions


Use shadcn/ui or build atomic UI components in /components/ui/
 UX Expectations
Animated UI using framer-motion or Tailwind transitions


Placeholder skeletons for loading states


Accessible keyboard navigation and alt text



⚙️ ROUTING SETUP (IN App.tsx)
Use React Router v6 nested layouts:
MainLayout wraps public pages like home, housing, marketplace


DashboardLayout wraps routes under /dashboard, /agreements, etc.


AuthLayout optionally wraps /login, /register, /forgot-password



✅ Deliverables for Stage 1
By the end of this stage:
All folders and file scaffolds are created


Placeholder .tsx files exist for all routes with headings


Routing is wired up and functional


Navbar/Footer layouts render appropriately


Project supports modern theme, responsiveness, and animation setup


Tailwind and core dependencies are configured




