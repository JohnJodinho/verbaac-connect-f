# VERBAAC CONNECT - BACKEND API CONSUMPTION GUIDE
## How to Integrate Your Frontend with the Verbaac Connect Backend

================================================================================
## ðŸš€ BACKEND STATUS
================================================================================

âœ… **Backend Running**: http://localhost:3000
âœ… **API Base URL**: http://localhost:3000/api
âœ… **Authentication**: JWT Bearer tokens required for protected routes
âœ… **Content Type**: application/json
âœ… **CORS Enabled**: Works with any localhost port (3000, 5173, 5174, etc.)

**Your backend is ready! Just follow this guide to consume the APIs.**

================================================================================
## ðŸ“‹ TABLE OF CONTENTS
================================================================================

1. **API Base Configuration**
2. **Authentication Flow**
3. **Housing APIs**
4. **Marketplace APIs** 
5. **Dashboard APIs**
6. **Search & Notifications APIs**
7. **Error Response Format**
8. **Sample API Calls**

================================================================================
## 1. API BASE CONFIGURATION
================================================================================

### 1.1 BACKEND SERVER DETAILS
- **Base URL**: `http://localhost:3000/api`
- **Health Check**: `GET http://localhost:3000/health`
- **API Info**: `GET http://localhost:3000/api`

### 1.2 AXIOS SETUP (Recommended)
```javascript
// Configure your HTTP client
const API_BASE_URL = 'http://localhost:3000/api';

// For protected routes, add Authorization header:
headers: {
  'Authorization': `Bearer ${your_jwt_token}`,
  'Content-Type': 'application/json'
}
```

### 1.3 CORS SUPPORT
The backend supports these frontend ports automatically:
- `3000, 3001, 4000, 4173, 5173, 5174, 8080, 8081`
- If you need a different port: `npm run ports:add YOUR_PORT` (in backend)

================================================================================
## 2. AUTHENTICATION FLOW
================================================================================

### 2.1 USER REGISTRATION
**POST** `/api/auth/register`

```json
// Request Body
{
  "email": "student@unn.edu.ng",
  "password": "password123", 
  "firstName": "John",
  "lastName": "Doe",
  "role": "student",           // Optional: "student" or "landlord"
  "university": "University of Nigeria, Nsukka",  // Optional
  "studentId": "UNN/2021/001"  // Optional
}

// Success Response (201)
{
  "success": true,
  "data": {
    "user": {
      "id": "user_123",
      "email": "student@unn.edu.ng", 
      "firstName": "John",
      "lastName": "Doe",
      "role": "student",
      "university": "University of Nigeria, Nsukka",
      "studentId": "UNN/2021/001",
      "isVerified": true,
      "createdAt": "2024-01-01T00:00:00Z",
      "updatedAt": "2024-01-01T00:00:00Z"
    },
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  },
  "message": "Registration successful"
}
```

### 2.2 USER LOGIN
**POST** `/api/auth/login`

```json
// Request Body
{
  "email": "john.doe@unn.edu.ng",
  "password": "password123"
}

// Success Response (200)
{
  "success": true,
  "data": {
    "user": { /* same user object as registration */ },
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  },
  "message": "Login successful"
}
```

### 2.3 GET CURRENT USER (Protected)
**GET** `/api/auth/me`

```javascript
// Headers Required
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

// Success Response (200)
{
  "success": true,
  "data": {
    "id": "user_123",
    "email": "john.doe@unn.edu.ng",
    "firstName": "John",
    "lastName": "Doe",
    "role": "student",
    "university": "University of Nigeria, Nsukka", 
    "studentId": "UNN/2021/001",
    "isVerified": true,
    "createdAt": "2024-01-01T00:00:00Z",
    "updatedAt": "2024-01-01T00:00:00Z"
  }
}
```

### 2.4 UPDATE PROFILE (Protected)
**PUT** `/api/auth/profile`

```json
// Request Body (partial update)
{
  "firstName": "John Updated",
  "lastName": "Doe Updated"
}

// Success Response (200)
{
  "success": true,
  "data": { /* updated user object */ },
  "message": "Profile updated successfully"
}
```

### 2.5 LOGOUT (Protected)
**POST** `/api/auth/logout`

```json
// Success Response (200)
{
  "success": true,
  "message": "Logout successful"
}
```

### 2.6 SAMPLE LOGIN AUTHENTICATION FLOW
```javascript
// 1. Login user
const loginResponse = await fetch('http://localhost:3000/api/auth/login', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    email: 'john.doe@unn.edu.ng', 
    password: 'password123'
  })
});

const loginData = await loginResponse.json();

// 2. Store token (however you manage state)
const token = loginData.data.token;
localStorage.setItem('authToken', token);

// 3. Use token for protected requests
const protectedResponse = await fetch('http://localhost:3000/api/auth/me', {
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  }
});
```

================================================================================
## 3. HOUSING APIS
================================================================================

### 3.1 GET PROPERTIES (Public)
**GET** `/api/housing/properties`

Query Parameters (all optional):
- `page`: Page number (default: 1)
- `limit`: Items per page (default: 10)  
- `search`: Search term
- `location`: Filter by location
- `minPrice`: Minimum price filter
- `maxPrice`: Maximum price filter
- `amenities`: Comma-separated amenities
- `university`: Filter by university
- `landlordId`: Filter by landlord

```javascript
// Example API Call
const response = await fetch('http://localhost:3000/api/housing/properties?page=1&limit=5&location=Nsukka');

// Success Response (200)
{
  "success": true,
  "data": [
    {
      "id": "prop_1",
      "title": "Modern 2-Bedroom Apartment Near UNN",
      "description": "Spacious apartment with modern amenities, perfect for students...",
      "price": 150000,
      "location": "Nsukka, Enugu State", 
      "images": ["image1.jpg", "image2.jpg"],
      "amenities": ["WiFi", "Air Conditioning", "Kitchen", "Parking"],
      "rules": ["No smoking", "No pets", "Visitors allowed till 10pm"],
      "landlordId": "user_2",
      "landlord": {
        "id": "user_2",
        "firstName": "Sarah",
        "lastName": "Johnson",
        "email": "sarah.landlord@gmail.com"
      },
      "isAvailable": true,
      "createdAt": "2024-01-01T00:00:00Z",
      "updatedAt": "2024-01-01T00:00:00Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 25,
    "totalPages": 3,
    "hasNext": true,
    "hasPrev": false
  }
}
```

### 3.2 GET SINGLE PROPERTY (Public)
**GET** `/api/housing/properties/:id`

```javascript
// Example API Call
const response = await fetch('http://localhost:3000/api/housing/properties/prop_1');

// Success Response (200)
{
  "success": true,
  "data": {
    "id": "prop_1",
    "title": "Modern 2-Bedroom Apartment Near UNN",
    // ... full property details
  }
}
```

### 3.3 CREATE PROPERTY (Protected - Landlords Only)
**POST** `/api/housing/properties`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Request Body
{
  "title": "New Property Title",
  "description": "Detailed property description",
  "price": 120000,
  "location": "Nsukka, Enugu State",
  "amenities": ["WiFi", "Kitchen"], 
  "rules": ["No smoking"],
  "images": ["image1.jpg", "image2.jpg"]
}

// Success Response (201)
{
  "success": true,
  "data": { /* new property object */ },
  "message": "Property created successfully"
}
```

### 3.4 UPDATE PROPERTY (Protected - Owner Only)
**PUT** `/api/housing/properties/:id`

```json
// Headers Required  
Authorization: Bearer your_jwt_token

// Request Body (partial update)
{
  "title": "Updated Property Title",
  "price": 130000
}

// Success Response (200)
{
  "success": true,
  "data": { /* updated property object */ },
  "message": "Property updated successfully"
}
```

### 3.5 DELETE PROPERTY (Protected - Owner Only)
**DELETE** `/api/housing/properties/:id`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "message": "Property deleted successfully"
}
```

### 3.6 CONTACT LANDLORD (Protected)
**POST** `/api/housing/properties/:id/contact`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Request Body
{
  "message": "I'm interested in viewing this property",
  "phone": "+234123456789",
  "preferredTime": "2024-01-15T10:00:00Z"
}

// Success Response (200)
{
  "success": true,
  "message": "Message sent successfully"
}
```

### 3.7 TOGGLE PROPERTY AVAILABILITY (Protected - Owner Only)
**PATCH** `/api/housing/properties/:id/availability`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "data": { /* updated property with new availability status */ },
  "message": "Property availability updated"
}
```

================================================================================
## 4. MARKETPLACE APIS
================================================================================

### 4.1 GET MARKETPLACE ITEMS (Public)
**GET** `/api/marketplace/items`

Query Parameters (all optional):
- `page`: Page number (default: 1)
- `limit`: Items per page (default: 10)
- `search`: Search term
- `category`: Filter by category
- `condition`: Filter by condition (new, like-new, good, fair, poor)
- `minPrice`: Minimum price filter
- `maxPrice`: Maximum price filter  
- `university`: Filter by university
- `sellerId`: Filter by seller

```javascript
// Example API Call
const response = await fetch('http://localhost:3000/api/marketplace/items?page=1&category=Electronics');

// Success Response (200)
{
  "success": true,
  "data": [
    {
      "id": "item_1",
      "title": "Dell Laptop - Perfect for Students",
      "description": "Core i5, 8GB RAM, 256GB SSD. Great condition, perfect for programming and school work...",
      "price": 85000,
      "category": "Electronics",
      "condition": "good",
      "images": ["laptop1.jpg", "laptop2.jpg"],
      "tags": ["laptop", "dell", "student", "programming"],
      "sellerId": "user_1",
      "seller": {
        "id": "user_1",
        "firstName": "John",
        "lastName": "Doe",
        "university": "University of Nigeria, Nsukka"
      },
      "university": "University of Nigeria, Nsukka",
      "isAvailable": true,
      "createdAt": "2024-01-01T00:00:00Z",
      "updatedAt": "2024-01-01T00:00:00Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 15,
    "totalPages": 2,
    "hasNext": true,
    "hasPrev": false
  }
}
```

### 4.2 GET SINGLE ITEM (Public)
**GET** `/api/marketplace/items/:id`

```javascript
// Example API Call
const response = await fetch('http://localhost:3000/api/marketplace/items/item_1');

// Success Response (200)
{
  "success": true,
  "data": {
    "id": "item_1",
    "title": "Dell Laptop - Perfect for Students",
    // ... full item details with seller info
  }
}
```

### 4.3 CREATE MARKETPLACE ITEM (Protected)
**POST** `/api/marketplace/items`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Request Body
{
  "title": "iPhone 13 Pro Max",
  "description": "Barely used iPhone in excellent condition",
  "price": 250000,
  "category": "Electronics",
  "condition": "like-new",
  "university": "University of Nigeria, Nsukka",
  "images": ["phone1.jpg", "phone2.jpg"],
  "tags": ["iphone", "smartphone", "apple"]
}

// Success Response (201)
{
  "success": true,
  "data": { /* new item object */ },
  "message": "Item created successfully"
}
```

### 4.4 UPDATE ITEM (Protected - Owner Only)
**PUT** `/api/marketplace/items/:id`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Request Body (partial update)
{
  "title": "iPhone 13 Pro Max - UPDATED",
  "price": 240000
}

// Success Response (200)
{
  "success": true,
  "data": { /* updated item object */ },
  "message": "Item updated successfully"
}
```

### 4.5 DELETE ITEM (Protected - Owner Only)
**DELETE** `/api/marketplace/items/:id`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "message": "Item deleted successfully"
}
```

### 4.6 GET CATEGORIES (Public)
**GET** `/api/marketplace/categories`

```json
// Success Response (200)
{
  "success": true,
  "data": [
    "Electronics",
    "Books", 
    "Furniture",
    "Clothing",
    "Kitchen Items",
    "Sports Equipment",
    "School Supplies",
    "Musical Instruments"
  ]
}
```

### 4.7 SHOPPING CART OPERATIONS (Protected)

#### Get Cart
**GET** `/api/marketplace/cart`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "data": [
    {
      "id": "cart_1",
      "itemId": "item_1", 
      "quantity": 1,
      "item": { /* full item details */ }
    }
  ]
}
```

#### Add to Cart
**POST** `/api/marketplace/cart/add`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Request Body
{
  "itemId": "item_1",
  "quantity": 1
}

// Success Response (200)
{
  "success": true,
  "message": "Item added to cart"
}
```

#### Update Cart Item
**PUT** `/api/marketplace/cart/:itemId`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Request Body
{
  "quantity": 2
}

// Success Response (200)
{
  "success": true,
  "message": "Cart updated successfully"
}
```

#### Remove from Cart
**DELETE** `/api/marketplace/cart/:itemId`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "message": "Item removed from cart"
}
```

#### Clear Cart
**DELETE** `/api/marketplace/cart`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "message": "Cart cleared successfully"
}
```

### 4.8 FAVORITES OPERATIONS (Protected)

#### Add to Favorites
**POST** `/api/marketplace/items/:id/favorite`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "message": "Item added to favorites"
}
```

#### Remove from Favorites  
**DELETE** `/api/marketplace/items/:id/favorite`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "message": "Item removed from favorites"
}
```

#### Get Favorites
**GET** `/api/marketplace/favorites`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "data": [ /* array of favorited items */ ]
}
```

================================================================================
## 5. DASHBOARD APIS
================================================================================

### 5.1 GET USER STATISTICS (Protected)
**GET** `/api/dashboard/stats`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "data": {
    "totalProperties": 3,
    "totalEarnings": 450000,
    "totalViews": 1250,
    "activeListings": 2
  }
}
```

### 5.2 GET RECENT ACTIVITY (Protected)
**GET** `/api/dashboard/recent-activity`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "data": [
    {
      "id": "activity_1",
      "type": "property_view",
      "title": "Property Viewed",
      "description": "Your property 'Modern Apartment' was viewed by a potential tenant",
      "timestamp": "2024-01-01T10:30:00Z",
      "metadata": {
        "propertyId": "prop_1",
        "viewerName": "John Doe"
      }
    },
    {
      "id": "activity_2", 
      "type": "item_sold",
      "title": "Item Sold",
      "description": "Your laptop was sold successfully",
      "timestamp": "2024-01-01T09:15:00Z",
      "metadata": {
        "itemId": "item_1",
        "amount": 85000
      }
    }
  ]
}
```

### 5.3 GET EARNINGS DATA (Protected)
**GET** `/api/dashboard/earnings`

Query Parameters:
- `period`: "week", "month", or "year" (optional, default: "month")

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "data": {
    "total": 450000,
    "growth": 15.5,
    "data": [
      { "date": "2024-01-01", "amount": 50000 },
      { "date": "2024-01-02", "amount": 75000 },
      { "date": "2024-01-03", "amount": 60000 }
    ]
  }
}
```

================================================================================
## 6. SEARCH & NOTIFICATIONS APIS
================================================================================

### 6.1 GLOBAL SEARCH (Public)
**GET** `/api/search`

Query Parameters:
- `q`: Search query (required, min 2 characters)
- `type`: "all", "housing", "marketplace", or "users" (optional, default: "all")

```json
// Example API Call
GET /api/search?q=laptop&type=marketplace

// Success Response (200)
{
  "success": true,
  "data": {
    "housing": [ /* array of matching properties */ ],
    "marketplace": [ /* array of matching items */ ],
    "users": [ /* array of matching users (limited info) */ ],
    "counts": {
      "housing": 5,
      "marketplace": 12,
      "users": 3
    }
  }
}
```

### 6.2 SEARCH SUGGESTIONS (Public)
**GET** `/api/search/suggestions`

Query Parameters:
- `q`: Search query (required, min 2 characters)

```json
// Example API Call
GET /api/search/suggestions?q=lap

// Success Response (200)
{
  "success": true,
  "data": [
    "laptop",
    "laptop bag", 
    "laptops for students",
    "laptop accessories"
  ]
}
```

### 6.3 NOTIFICATIONS (Protected)

#### Get Notifications
**GET** `/api/notifications`

Query Parameters:
- `page`: Page number (optional, default: 1)
- `limit`: Items per page (optional, default: 10)

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "data": [
    {
      "id": "notif_1",
      "type": "property_inquiry",
      "title": "New Property Inquiry",
      "message": "John Doe is interested in your property 'Modern Apartment'",
      "isRead": false,
      "createdAt": "2024-01-01T10:30:00Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 5,
    "totalPages": 1,
    "hasNext": false,
    "hasPrev": false
  }
}
```

#### Mark Notification as Read
**PUT** `/api/notifications/:id/read`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "message": "Notification marked as read"
}
```

#### Mark All Notifications as Read
**PUT** `/api/notifications/mark-all-read`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "message": "All notifications marked as read"
}
```

#### Delete Notification
**DELETE** `/api/notifications/:id`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "message": "Notification deleted"
}
```

#### Get Unread Count
**GET** `/api/notifications/unread-count`

```json
// Headers Required
Authorization: Bearer your_jwt_token

// Success Response (200)
{
  "success": true,
  "data": {
    "count": 3
  }
}
```

================================================================================
## 7. ERROR RESPONSE FORMAT
================================================================================

All API errors follow this consistent format:

```json
// Error Response (4xx or 5xx status)
{
  "success": false,
  "error": {
    "code": "ERROR_CODE",
    "message": "Human-readable error message",
    "details": []  // Additional error details (for validation errors)
  }
}
```

### 7.1 COMMON ERROR CODES
- **AUTH_REQUIRED** (401): Authentication token missing or invalid
- **INSUFFICIENT_PERMISSIONS** (403): User role lacks required permissions
- **VALIDATION_ERROR** (400): Input validation failed
- **RESOURCE_NOT_FOUND** (404): Requested resource doesn't exist
- **RATE_LIMIT_EXCEEDED** (429): Too many requests
- **INTERNAL_ERROR** (500): Server error

### 7.2 VALIDATION ERROR EXAMPLE
```json
{
  "success": false,
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Invalid input data",
    "details": [
      {
        "field": "email",
        "message": "Email is required"
      },
      {
        "field": "password", 
        "message": "Password must be at least 8 characters"
      }
    ]
  }
}
```

================================================================================
## 8. SAMPLE API CALLS
================================================================================

### 8.1 COMPLETE AUTHENTICATION FLOW
```javascript
// 1. Register new user
const registerResponse = await fetch('http://localhost:3000/api/auth/register', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    email: 'newuser@unn.edu.ng',
    password: 'password123',
    firstName: 'New',
    lastName: 'User',
    role: 'student'
  })
});

// 2. Login user
const loginResponse = await fetch('http://localhost:3000/api/auth/login', {
  method: 'POST', 
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    email: 'john.doe@unn.edu.ng',
    password: 'password123'
  })
});

const { token } = (await loginResponse.json()).data;

// 3. Use token for protected requests
const userResponse = await fetch('http://localhost:3000/api/auth/me', {
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  }
});
```

### 8.2 FETCH PROPERTIES WITH FILTERS
```javascript
// Fetch properties with search and filters
const searchParams = new URLSearchParams({
  page: '1',
  limit: '10',
  search: 'modern apartment',
  location: 'Nsukka',
  minPrice: '100000',
  maxPrice: '200000',
  amenities: 'WiFi,Kitchen'
});

const response = await fetch(`http://localhost:3000/api/housing/properties?${searchParams}`);
const propertiesData = await response.json();

console.log('Properties:', propertiesData.data);
console.log('Pagination:', propertiesData.pagination);
```

### 8.3 CREATE AND MANAGE MARKETPLACE ITEM
```javascript
// Create new marketplace item
const createResponse = await fetch('http://localhost:3000/api/marketplace/items', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    title: 'MacBook Pro 2023',
    description: 'Brand new MacBook Pro, still in box',
    price: 450000,
    category: 'Electronics',
    condition: 'new',
    university: 'University of Nigeria, Nsukka',
    tags: ['macbook', 'laptop', 'apple']
  })
});

const newItem = await createResponse.json();

// Add item to cart
const cartResponse = await fetch('http://localhost:3000/api/marketplace/cart/add', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    itemId: newItem.data.id,
    quantity: 1
  })
});
```

### 8.4 DASHBOARD DATA RETRIEVAL
```javascript
// Get user dashboard stats
const statsResponse = await fetch('http://localhost:3000/api/dashboard/stats', {
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  }
});

// Get recent activity
const activityResponse = await fetch('http://localhost:3000/api/dashboard/recent-activity', {
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  }
});

// Get earnings data for current month
const earningsResponse = await fetch('http://localhost:3000/api/dashboard/earnings?period=month', {
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  }
});

const statsData = await statsResponse.json();
const activityData = await activityResponse.json();
const earningsData = await earningsResponse.json();
```

### 8.5 SEARCH AND NOTIFICATIONS
```javascript
// Global search
const searchResponse = await fetch('http://localhost:3000/api/search?q=laptop&type=marketplace');
const searchResults = await searchResponse.json();

// Get search suggestions
const suggestionsResponse = await fetch('http://localhost:3000/api/search/suggestions?q=lap');
const suggestions = await suggestionsResponse.json();

// Get notifications
const notificationsResponse = await fetch('http://localhost:3000/api/notifications', {
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  }
});

// Get unread notification count
const unreadResponse = await fetch('http://localhost:3000/api/notifications/unread-count', {
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  }
});
```

================================================================================
## ðŸ§ª TESTING THE BACKEND
================================================================================

### Test Health Check
```bash
curl http://localhost:3000/health
```

### Test API Info
```bash  
curl http://localhost:3000/api
```

### Test Sample Login
```bash
curl -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"john.doe@unn.edu.ng","password":"password123"}'
```

### Test Properties Endpoint
```bash
curl http://localhost:3000/api/housing/properties
```

### Test Marketplace Endpoint
```bash
curl http://localhost:3000/api/marketplace/items
```

================================================================================
## ðŸŽ¯ INTEGRATION CHECKLIST
================================================================================

**Basic Integration**:
â–¡ Can fetch API info from /api
â–¡ Can login and receive JWT token
â–¡ Can access protected routes with token
â–¡ Can fetch properties list
â–¡ Can fetch marketplace items

**Authentication Flow**:
â–¡ User registration works
â–¡ User login returns valid token
â–¡ Protected routes accept Bearer token
â–¡ Token validation works for /auth/me

**Core Features**:
â–¡ Property search and filtering
â–¡ Marketplace item browsing
â–¡ Shopping cart operations
â–¡ Dashboard statistics display
â–¡ Global search functionality

**Error Handling**:
â–¡ Handle 401 unauthorized responses
â–¡ Display validation error messages
â–¡ Show user-friendly error messages

**ðŸŽ‰ CONGRATULATIONS!**
Your frontend can now consume all Verbaac Connect backend APIs!

================================================================================
## ðŸ“ž QUICK SUPPORT
================================================================================

**Backend Running**: http://localhost:3000
**Sample Credentials**: 
- Email: john.doe@unn.edu.ng  
- Password: password123

**Need Help?** 
- Check backend logs in terminal
- Test individual endpoints with curl
- Verify CORS settings if having issues

**Happy coding!** ðŸš€
```

================================================================================
## 5. MARKETPLACE MODULE INTEGRATION
================================================================================

### 5.1 MARKETPLACE API FUNCTIONS
Add to `src/services/api.ts`:

```typescript
export const marketplaceAPI = {
  // Get items with filtering
  getItems: (params?: {
    page?: number;
    limit?: number;
    search?: string;
    category?: string;
    condition?: string;
    minPrice?: number;
    maxPrice?: number;
    university?: string;
    sellerId?: string;
  }): Promise<AxiosResponse<PaginatedResponse<MarketplaceItem>>> =>
    api.get('/marketplace/items', { params }),

  // Get single item
  getItem: (id: string): Promise<AxiosResponse<ApiResponse<MarketplaceItem>>> =>
    api.get(`/marketplace/items/${id}`),

  // Create item
  createItem: (itemData: {
    title: string;
    description: string;
    price: number;
    category: string;
    condition: 'new' | 'like-new' | 'good' | 'fair' | 'poor';
    university: string;
    images?: string[];
    tags?: string[];
  }): Promise<AxiosResponse<ApiResponse<MarketplaceItem>>> =>
    api.post('/marketplace/items', itemData),

  // Update item
  updateItem: (id: string, itemData: Partial<MarketplaceItem>): Promise<AxiosResponse<ApiResponse<MarketplaceItem>>> =>
    api.put(`/marketplace/items/${id}`, itemData),

  // Delete item
  deleteItem: (id: string): Promise<AxiosResponse<ApiResponse<null>>> =>
    api.delete(`/marketplace/items/${id}`),

  // Get categories
  getCategories: (): Promise<AxiosResponse<ApiResponse<string[]>>> =>
    api.get('/marketplace/categories'),

  // Cart operations
  getCart: (): Promise<AxiosResponse<ApiResponse<any[]>>> =>
    api.get('/marketplace/cart'),

  addToCart: (itemData: {
    itemId: string;
    quantity: number;
  }): Promise<AxiosResponse<ApiResponse<null>>> =>
    api.post('/marketplace/cart/add', itemData),

  updateCartItem: (itemId: string, quantity: number): Promise<AxiosResponse<ApiResponse<null>>> =>
    api.put(`/marketplace/cart/${itemId}`, { quantity }),

  removeFromCart: (itemId: string): Promise<AxiosResponse<ApiResponse<null>>> =>
    api.delete(`/marketplace/cart/${itemId}`),

  clearCart: (): Promise<AxiosResponse<ApiResponse<null>>> =>
    api.delete('/marketplace/cart'),

  // Favorites
  addToFavorites: (itemId: string): Promise<AxiosResponse<ApiResponse<null>>> =>
    api.post(`/marketplace/items/${itemId}/favorite`),

  removeFromFavorites: (itemId: string): Promise<AxiosResponse<ApiResponse<null>>> =>
    api.delete(`/marketplace/items/${itemId}/favorite`),

  getFavorites: (): Promise<AxiosResponse<ApiResponse<MarketplaceItem[]>>> =>
    api.get('/marketplace/favorites'),

  // Orders
  createOrder: (orderData: {
    items: Array<{ itemId: string; quantity: number }>;
    deliveryAddress: string;
    paymentMethod: string;
  }): Promise<AxiosResponse<ApiResponse<any>>> =>
    api.post('/marketplace/orders', orderData),

  getOrders: (): Promise<AxiosResponse<ApiResponse<any[]>>> =>
    api.get('/marketplace/orders'),

  getOrder: (id: string): Promise<AxiosResponse<ApiResponse<any>>> =>
    api.get(`/marketplace/orders/${id}`),

  updateOrderStatus: (id: string, status: string): Promise<AxiosResponse<ApiResponse<null>>> =>
    api.put(`/marketplace/orders/${id}/status`, { status })
};
```

### 5.2 SHOPPING CART HOOK
Create `src/hooks/useCart.ts`:

```typescript
import { useState, useEffect } from 'react';
import { marketplaceAPI } from '../services/api';

export interface CartItem {
  id: string;
  itemId: string;
  title: string;
  price: number;
  quantity: number;
  image?: string;
}

export const useCart = () => {
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [loading, setLoading] = useState(false);

  const fetchCart = async () => {
    try {
      setLoading(true);
      const response = await marketplaceAPI.getCart();
      setCartItems(response.data.data);
    } catch (error) {
      console.error('Failed to fetch cart:', error);
    } finally {
      setLoading(false);
    }
  };

  const addToCart = async (itemId: string, quantity: number = 1) => {
    try {
      await marketplaceAPI.addToCart({ itemId, quantity });
      await fetchCart(); // Refresh cart
      return true;
    } catch (error) {
      console.error('Failed to add to cart:', error);
      return false;
    }
  };

  const updateQuantity = async (itemId: string, quantity: number) => {
    try {
      if (quantity <= 0) {
        await marketplaceAPI.removeFromCart(itemId);
      } else {
        await marketplaceAPI.updateCartItem(itemId, quantity);
      }
      await fetchCart();
      return true;
    } catch (error) {
      console.error('Failed to update cart:', error);
      return false;
    }
  };

  const removeFromCart = async (itemId: string) => {
    try {
      await marketplaceAPI.removeFromCart(itemId);
      await fetchCart();
      return true;
    } catch (error) {
      console.error('Failed to remove from cart:', error);
      return false;
    }
  };

  const clearCart = async () => {
    try {
      await marketplaceAPI.clearCart();
      setCartItems([]);
      return true;
    } catch (error) {
      console.error('Failed to clear cart:', error);
      return false;
    }
  };

  const cartTotal = cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);
  const cartCount = cartItems.reduce((total, item) => total + item.quantity, 0);

  useEffect(() => {
    fetchCart();
  }, []);

  return {
    cartItems,
    cartTotal,
    cartCount,
    loading,
    addToCart,
    updateQuantity,
    removeFromCart,
    clearCart,
    refetch: fetchCart
  };
};
```

================================================================================
## 6. DASHBOARD INTEGRATION
================================================================================

### 6.1 DASHBOARD API FUNCTIONS
Add to `src/services/api.ts`:

```typescript
export const dashboardAPI = {
  // Get user statistics
  getStats: (): Promise<AxiosResponse<ApiResponse<{
    totalProperties: number;
    totalEarnings: number;
    totalViews: number;
    activeListings: number;
  }>>> =>
    api.get('/dashboard/stats'),

  // Get recent activity
  getRecentActivity: (): Promise<AxiosResponse<ApiResponse<Array<{
    id: string;
    type: string;
    title: string;
    description: string;
    timestamp: string;
    metadata?: any;
  }>>>> =>
    api.get('/dashboard/recent-activity'),

  // Get earnings data
  getEarnings: (period?: 'week' | 'month' | 'year'): Promise<AxiosResponse<ApiResponse<{
    total: number;
    growth: number;
    data: Array<{ date: string; amount: number }>;
  }>>> =>
    api.get('/dashboard/earnings', { params: { period } })
};
```

### 6.2 DASHBOARD COMPONENT
Create `src/components/Dashboard.tsx`:

```typescript
import React, { useState, useEffect } from 'react';
import { dashboardAPI } from '../services/api';
import { useAuth } from '../contexts/AuthContext';

interface DashboardStats {
  totalProperties: number;
  totalEarnings: number;
  totalViews: number;
  activeListings: number;
}

interface RecentActivity {
  id: string;
  type: string;
  title: string;
  description: string;
  timestamp: string;
}

export const Dashboard: React.FC = () => {
  const { user } = useAuth();
  const [stats, setStats] = useState<DashboardStats | null>(null);
  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchDashboardData();
  }, []);

  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      
      const [statsResponse, activityResponse] = await Promise.all([
        dashboardAPI.getStats(),
        dashboardAPI.getRecentActivity()
      ]);

      setStats(statsResponse.data.data);
      setRecentActivity(activityResponse.data.data);
    } catch (error) {
      console.error('Failed to fetch dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) return <div>Loading dashboard...</div>;

  return (
    <div className="dashboard">
      <div className="dashboard-header">
        <h1>Welcome back, {user?.firstName}!</h1>
        <p>Here's what's happening with your account</p>
      </div>

      {stats && (
        <div className="stats-grid">
          <div className="stat-card">
            <h3>Total Properties</h3>
            <p className="stat-number">{stats.totalProperties}</p>
          </div>
          <div className="stat-card">
            <h3>Total Earnings</h3>
            <p className="stat-number">â‚¦{stats.totalEarnings.toLocaleString()}</p>
          </div>
          <div className="stat-card">
            <h3>Total Views</h3>
            <p className="stat-number">{stats.totalViews}</p>
          </div>
          <div className="stat-card">
            <h3>Active Listings</h3>
            <p className="stat-number">{stats.activeListings}</p>
          </div>
        </div>
      )}

      <div className="recent-activity">
        <h2>Recent Activity</h2>
        {recentActivity.length > 0 ? (
          <div className="activity-list">
            {recentActivity.map(activity => (
              <div key={activity.id} className="activity-item">
                <h4>{activity.title}</h4>
                <p>{activity.description}</p>
                <small>{new Date(activity.timestamp).toLocaleDateString()}</small>
              </div>
            ))}
          </div>
        ) : (
          <p>No recent activity</p>
        )}
      </div>
    </div>
  );
};
```

================================================================================
## 7. SEARCH & NOTIFICATIONS
================================================================================

### 7.1 SEARCH API FUNCTIONS
Add to `src/services/api.ts`:

```typescript
export const searchAPI = {
  // Global search
  search: (params: {
    q: string;
    type?: 'all' | 'housing' | 'marketplace' | 'users';
  }): Promise<AxiosResponse<ApiResponse<{
    housing: Property[];
    marketplace: MarketplaceItem[];
    users: Partial<User>[];
    counts: {
      housing: number;
      marketplace: number;
      users: number;
    };
  }>>> =>
    api.get('/search', { params }),

  // Search suggestions
  getSuggestions: (q: string): Promise<AxiosResponse<ApiResponse<string[]>>> =>
    api.get('/search/suggestions', { params: { q } })
};

export const notificationAPI = {
  // Get notifications
  getNotifications: (params?: {
    page?: number;
    limit?: number;
  }): Promise<AxiosResponse<PaginatedResponse<{
    id: string;
    type: string;
    title: string;
    message: string;
    isRead: boolean;
    createdAt: string;
  }>>> =>
    api.get('/notifications', { params }),

  // Mark as read
  markAsRead: (id: string): Promise<AxiosResponse<ApiResponse<null>>> =>
    api.put(`/notifications/${id}/read`),

  // Mark all as read
  markAllAsRead: (): Promise<AxiosResponse<ApiResponse<null>>> =>
    api.put('/notifications/mark-all-read'),

  // Delete notification
  deleteNotification: (id: string): Promise<AxiosResponse<ApiResponse<null>>> =>
    api.delete(`/notifications/${id}`),

  // Get unread count
  getUnreadCount: (): Promise<AxiosResponse<ApiResponse<{ count: number }>>> =>
    api.get('/notifications/unread-count')
};
```

### 7.2 SEARCH HOOK
Create `src/hooks/useSearch.ts`:

```typescript
import { useState, useCallback, useEffect } from 'react';
import { searchAPI } from '../services/api';
import { debounce } from 'lodash'; // npm install lodash

export const useSearch = () => {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState<any>(null);
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Debounced search function
  const debouncedSearch = useCallback(
    debounce(async (searchQuery: string) => {
      if (!searchQuery.trim()) {
        setResults(null);
        setSuggestions([]);
        return;
      }

      try {
        setLoading(true);
        setError(null);

        const [searchResponse, suggestionsResponse] = await Promise.all([
          searchAPI.search({ q: searchQuery }),
          searchAPI.getSuggestions(searchQuery)
        ]);

        setResults(searchResponse.data.data);
        setSuggestions(suggestionsResponse.data.data);
      } catch (err: any) {
        setError(err.response?.data?.error?.message || 'Search failed');
      } finally {
        setLoading(false);
      }
    }, 300),
    []
  );

  useEffect(() => {
    debouncedSearch(query);
    return () => {
      debouncedSearch.cancel();
    };
  }, [query, debouncedSearch]);

  const search = (newQuery: string) => {
    setQuery(newQuery);
  };

  const clearSearch = () => {
    setQuery('');
    setResults(null);
    setSuggestions([]);
    setError(null);
  };

  return {
    query,
    results,
    suggestions,
    loading,
    error,
    search,
    clearSearch
  };
};
```

================================================================================
## 8. ERROR HANDLING PATTERNS
================================================================================

### 8.1 ERROR HANDLING HOOK
Create `src/hooks/useErrorHandler.ts`:

```typescript
import { useState } from 'react';
import { AxiosError } from 'axios';

interface ApiError {
  code: string;
  message: string;
  details?: any[];
}

export const useErrorHandler = () => {
  const [error, setError] = useState<string | null>(null);

  const handleError = (err: unknown) => {
    if (err instanceof AxiosError) {
      const apiError = err.response?.data?.error as ApiError;
      
      if (apiError) {
        setError(apiError.message);
        
        // Handle specific error codes
        switch (apiError.code) {
          case 'AUTH_REQUIRED':
            // Redirect to login
            window.location.href = '/login';
            break;
          case 'VALIDATION_ERROR':
            // Handle validation errors
            console.error('Validation errors:', apiError.details);
            break;
          case 'RATE_LIMIT_EXCEEDED':
            setError('Too many requests. Please try again later.');
            break;
          default:
            setError(apiError.message);
        }
      } else {
        setError('An unexpected error occurred');
      }
    } else {
      setError('An unexpected error occurred');
    }
  };

  const clearError = () => setError(null);

  return { error, handleError, clearError };
};
```

### 8.2 ERROR BOUNDARY COMPONENT
Create `src/components/ErrorBoundary.tsx`:

```typescript
import React, { Component, ErrorInfo, ReactNode } from 'react';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

export class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Uncaught error:', error, errorInfo);
  }

  public render() {
    if (this.state.hasError) {
      return this.props.fallback || (
        <div className="error-boundary">
          <h2>Something went wrong</h2>
          <p>{this.state.error?.message}</p>
          <button onClick={() => this.setState({ hasError: false })}>
            Try again
          </button>
        </div>
      );
    }

    return this.props.children;
  }
}
```

================================================================================
## 9. STATE MANAGEMENT EXAMPLES
================================================================================

### 9.1 ZUSTAND STORE EXAMPLE
Create `src/store/useAppStore.ts`:

```typescript
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

interface AppState {
  // UI State
  sidebarOpen: boolean;
  theme: 'light' | 'dark';
  
  // Cart State
  cartItems: any[];
  cartTotal: number;
  
  // Search State
  searchQuery: string;
  searchFilters: Record<string, any>;
  
  // Actions
  setSidebarOpen: (open: boolean) => void;
  setTheme: (theme: 'light' | 'dark') => void;
  updateCart: (items: any[]) => void;
  setSearchQuery: (query: string) => void;
  setSearchFilters: (filters: Record<string, any>) => void;
}

export const useAppStore = create<AppState>()(
  persist(
    (set, get) => ({
      // Initial state
      sidebarOpen: false,
      theme: 'light',
      cartItems: [],
      cartTotal: 0,
      searchQuery: '',
      searchFilters: {},

      // Actions
      setSidebarOpen: (open) => set({ sidebarOpen: open }),
      setTheme: (theme) => set({ theme }),
      updateCart: (items) => set({ 
        cartItems: items,
        cartTotal: items.reduce((total, item) => total + (item.price * item.quantity), 0)
      }),
      setSearchQuery: (query) => set({ searchQuery: query }),
      setSearchFilters: (filters) => set({ searchFilters: filters })
    }),
    {
      name: 'verbaac-app-storage',
      partialize: (state) => ({
        theme: state.theme,
        searchFilters: state.searchFilters
      })
    }
  )
);
```

### 9.2 REACT QUERY INTEGRATION
Create `src/hooks/useProperties.ts`:

```typescript
import { useQuery, useMutation, useQueryClient } from 'react-query';
import { housingAPI } from '../services/api';

export const useProperties = (filters?: any) => {
  return useQuery(
    ['properties', filters],
    () => housingAPI.getProperties(filters),
    {
      select: (data) => data.data,
      staleTime: 5 * 60 * 1000, // 5 minutes
      cacheTime: 10 * 60 * 1000 // 10 minutes
    }
  );
};

export const useProperty = (id: string) => {
  return useQuery(
    ['property', id],
    () => housingAPI.getProperty(id),
    {
      select: (data) => data.data.data,
      enabled: !!id
    }
  );
};

export const useCreateProperty = () => {
  const queryClient = useQueryClient();
  
  return useMutation(housingAPI.createProperty, {
    onSuccess: () => {
      queryClient.invalidateQueries(['properties']);
    }
  });
};
```

================================================================================
## 10. TESTING & DEBUGGING
================================================================================

### 10.1 API TESTING UTILITY
Create `src/utils/apiTesting.ts`:

```typescript
import { authAPI, housingAPI, marketplaceAPI } from '../services/api';

export const testAPI = {
  // Test authentication
  async testAuth() {
    console.log('Testing authentication...');
    
    try {
      // Test login
      const loginResponse = await authAPI.login({
        email: 'john.doe@unn.edu.ng',
        password: 'password123'
      });
      console.log('Login successful:', loginResponse.data);
      
      // Test get current user
      const userResponse = await authAPI.getMe();
      console.log('Current user:', userResponse.data);
      
      return true;
    } catch (error) {
      console.error('Auth test failed:', error);
      return false;
    }
  },

  // Test housing APIs
  async testHousing() {
    console.log('Testing housing APIs...');
    
    try {
      const response = await housingAPI.getProperties({
        page: 1,
        limit: 5
      });
      console.log('Properties:', response.data);
      return true;
    } catch (error) {
      console.error('Housing test failed:', error);
      return false;
    }
  },

  // Test marketplace APIs
  async testMarketplace() {
    console.log('Testing marketplace APIs...');
    
    try {
      const response = await marketplaceAPI.getItems({
        page: 1,
        limit: 5
      });
      console.log('Marketplace items:', response.data);
      return true;
    } catch (error) {
      console.error('Marketplace test failed:', error);
      return false;
    }
  },

  // Run all tests
  async runAllTests() {
    console.log('Running all API tests...');
    
    const results = await Promise.allSettled([
      this.testAuth(),
      this.testHousing(),
      this.testMarketplace()
    ]);
    
    console.log('Test results:', results);
    return results;
  }
};

// Usage in browser console:
// import { testAPI } from './utils/apiTesting';
// testAPI.runAllTests();
```

### 10.2 DEBUG COMPONENT
Create `src/components/DebugPanel.tsx`:

```typescript
import React, { useState } from 'react';
import { testAPI } from '../utils/apiTesting';

export const DebugPanel: React.FC = () => {
  const [results, setResults] = useState<any>(null);
  const [loading, setLoading] = useState(false);

  const runTests = async () => {
    setLoading(true);
    const testResults = await testAPI.runAllTests();
    setResults(testResults);
    setLoading(false);
  };

  if (process.env.NODE_ENV !== 'development') {
    return null;
  }

  return (
    <div className="debug-panel" style={{
      position: 'fixed',
      bottom: 20,
      right: 20,
      background: '#f0f0f0',
      padding: 20,
      border: '1px solid #ccc',
      borderRadius: 8,
      zIndex: 9999
    }}>
      <h3>Debug Panel</h3>
      <button onClick={runTests} disabled={loading}>
        {loading ? 'Running Tests...' : 'Test APIs'}
      </button>
      
      {results && (
        <div>
          <h4>Test Results:</h4>
          <pre>{JSON.stringify(results, null, 2)}</pre>
        </div>
      )}
    </div>
  );
};
```

================================================================================
## 11. PRODUCTION DEPLOYMENT
================================================================================

### 11.1 ENVIRONMENT CONFIGURATION
Create different `.env` files:

**`.env.development`**:
```env
VITE_API_BASE_URL=http://localhost:3000/api
VITE_DEBUG_API=true
```

**`.env.production`**:
```env
VITE_API_BASE_URL=https://api.verbaacconnect.com/api
VITE_DEBUG_API=false
```

**`.env.staging`**:
```env
VITE_API_BASE_URL=https://staging-api.verbaacconnect.com/api
VITE_DEBUG_API=true
```

### 11.2 BUILD CONFIGURATION
Update `vite.config.ts`:

```typescript
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  build: {
    outDir: 'dist',
    sourcemap: process.env.NODE_ENV === 'development',
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          api: ['axios'],
        }
      }
    }
  },
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:3000',
        changeOrigin: true,
        secure: false
      }
    }
  }
});
```

### 11.3 DEPLOYMENT CHECKLIST
```
Pre-deployment checklist:

â–¡ Environment variables configured
â–¡ API endpoints tested
â–¡ Authentication flow working
â–¡ Error handling implemented
â–¡ Loading states added
â–¡ Responsive design tested
â–¡ Performance optimized
â–¡ Security headers configured
â–¡ HTTPS enabled (production)
â–¡ Analytics integrated (optional)
â–¡ Error monitoring setup (Sentry, etc.)
â–¡ Cache strategies implemented
â–¡ SEO optimization (if applicable)
```

================================================================================
## ðŸŽ¯ QUICK INTEGRATION EXAMPLES
================================================================================

### Example 1: Login Form
```typescript
import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';

export const LoginForm: React.FC = () => {
  const { login } = useAuth();
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      await login(formData.email, formData.password);
      navigate('/dashboard');
    } catch (err: any) {
      setError(err.response?.data?.error?.message || 'Login failed');
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="email"
        placeholder="Email"
        value={formData.email}
        onChange={(e) => setFormData({...formData, email: e.target.value})}
        required
      />
      <input
        type="password"
        placeholder="Password"
        value={formData.password}
        onChange={(e) => setFormData({...formData, password: e.target.value})}
        required
      />
      {error && <div className="error">{error}</div>}
      <button type="submit" disabled={loading}>
        {loading ? 'Logging in...' : 'Login'}
      </button>
    </form>
  );
};
```

### Example 2: Property Search
```typescript
import React, { useState } from 'react';
import { useProperties } from '../hooks/useProperties';

export const PropertySearch: React.FC = () => {
  const [filters, setFilters] = useState({
    search: '',
    location: '',
    minPrice: '',
    maxPrice: ''
  });

  const { data: propertiesData, isLoading, error } = useProperties(filters);

  const handleFilterChange = (key: string, value: string) => {
    setFilters(prev => ({ ...prev, [key]: value }));
  };

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error loading properties</div>;

  return (
    <div>
      <div className="filters">
        <input
          placeholder="Search properties..."
          value={filters.search}
          onChange={(e) => handleFilterChange('search', e.target.value)}
        />
        <input
          placeholder="Location"
          value={filters.location}
          onChange={(e) => handleFilterChange('location', e.target.value)}
        />
        <input
          placeholder="Min Price"
          type="number"
          value={filters.minPrice}
          onChange={(e) => handleFilterChange('minPrice', e.target.value)}
        />
        <input
          placeholder="Max Price"
          type="number"
          value={filters.maxPrice}
          onChange={(e) => handleFilterChange('maxPrice', e.target.value)}
        />
      </div>

      <div className="properties">
        {propertiesData?.data.map(property => (
          <div key={property.id} className="property-card">
            <h3>{property.title}</h3>
            <p>â‚¦{property.price.toLocaleString()}</p>
            <p>{property.location}</p>
          </div>
        ))}
      </div>
    </div>
  );
};
```

================================================================================
## ðŸ”§ TROUBLESHOOTING COMMON ISSUES
================================================================================

### Issue 1: CORS Errors
**Problem**: `Access to XMLHttpRequest at 'http://localhost:3000/api' from origin 'http://localhost:5173' has been blocked by CORS policy`

**Solution**:
- Ensure backend is running on port 3000
- Check CORS configuration in backend
- Verify frontend URL in backend CORS settings

### Issue 2: Authentication Token Not Persisting
**Problem**: User gets logged out on page refresh

**Solution**:
```typescript
// Make sure token is stored in localStorage
localStorage.setItem('verbaac_auth_token', token);

// Check for token on app initialization
useEffect(() => {
  const token = localStorage.getItem('verbaac_auth_token');
  if (token) {
    // Verify token with backend
    authAPI.getMe().then(response => {
      setUser(response.data.data);
    }).catch(() => {
      localStorage.removeItem('verbaac_auth_token');
    });
  }
}, []);
```

### Issue 3: API Response Type Errors
**Problem**: TypeScript errors with API responses

**Solution**:
```typescript
// Use proper typing with generic responses
const response = await housingAPI.getProperties();
const properties: Property[] = response.data.data;
const pagination = response.data.pagination;
```

================================================================================
## ðŸ“ž SUPPORT & RESOURCES
================================================================================

### Backend API Documentation
- **Base URL**: http://localhost:3000/api
- **Health Check**: http://localhost:3000/health
- **API Info**: http://localhost:3000/api

### Sample API Calls for Testing
```bash
# Test login
curl -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"john.doe@unn.edu.ng","password":"password123"}'

# Test properties
curl http://localhost:3000/api/housing/properties

# Test marketplace
curl http://localhost:3000/api/marketplace/items
```

### Common HTTP Status Codes
- **200**: Success
- **201**: Created
- **400**: Bad Request (validation error)
- **401**: Unauthorized (auth required)
- **403**: Forbidden (insufficient permissions)
- **404**: Not Found
- **429**: Too Many Requests (rate limited)
- **500**: Internal Server Error

================================================================================
## âœ… INTEGRATION COMPLETION CHECKLIST
================================================================================

**Setup Phase**:
â–¡ Environment variables configured
â–¡ API client (Axios) setup
â–¡ TypeScript interfaces defined
â–¡ Authentication context implemented

**Core Features**:
â–¡ User authentication (login/register/logout)
â–¡ Protected routes implemented
â–¡ Property listing and search
â–¡ Marketplace item browsing
â–¡ Shopping cart functionality
â–¡ Dashboard statistics

**Advanced Features**:
â–¡ Search functionality
â–¡ Notifications system
â–¡ Error handling
â–¡ Loading states
â–¡ State management

**Testing & Deployment**:
â–¡ API endpoints tested
â–¡ Error scenarios handled
â–¡ Production environment configured
â–¡ Performance optimized

**ðŸŽ‰ CONGRATULATIONS!**
Your frontend is now fully integrated with the Verbaac Connect backend API!

For additional support or questions, refer to the comprehensive backend guide or test the APIs directly using the provided examples.
